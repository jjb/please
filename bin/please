#!/usr/bin/env ruby

require 'rubygems'
require 'pony'
require 'active_support/core_ext'

require ENV['HOME'] + '/.please.rb'
@email_address   = EMAIL_ADDRESS
@phone_number    = PHONE_NUMBER
@carrier_gateway = CARRIER_GATEWAY
@dydns           = DYDNS

@password =
  if defined?(PASSWORD)
    PASSWORD
  else
   `security 2>&1 >/dev/null find-internet-password -g -s 'www.google.com' -a '#{@email_address}' | cut -d '"' -f 2`.strip
  end

# Change this is you don't use Gmail
@smtp_options = 
  if defined?(SMTP_OPTIONS)
    SMTP_OPTIONS
  else
    {
      :address              => 'smtp.gmail.com',
      :port                 => '587',
      :enable_starttls_auto => true,
      :user_name            => @email_address,
      :password             => @password,
      :authentication       => :plain,
      :domain               => @dydns
    }
  end

@action = ARGV[0]
@object = ARGV[1]
@message = ARGV[2]

if %w{email sms}.include?(@action)
  @timer    = ARGV[3]
  @increment = ARGV[4].to_i
  @unit      = ARGV[5]
elsif %w{exec}.include?(@action)
  @timer     = ARGV[2]
  @increment = ARGV[3].to_i
  @unit      = ARGV[4]
end

case @timer
when nil
  # do nothing
when 'in'
  unless @increment.integer? && !@increment.zero?
    raise "Provided increment is not numeric."
  end

  unless %w{
    second seconds minute minutes hour hours day days week weeks fortnight fortnights
  }.include?(@unit)
    raise "Provided time unit is not valid."
  end

  sleep (@increment.send @unit.to_s).to_i
else
  raise "\"#{@timer}\"? What does that mean?"
end

def email(email_address, message)
  Pony.mail(
    :to => email_address,
    :from => @email_address,
    :subject => message,
    :body => message,
    :via => :smtp,
    :via_options => @smtp_options
  )
end

def sms(email_address, message)
  Pony.mail(
    :to => email_address,
    :from => email_address,
    :subject => '',
    :body => message,
    :via => :smtp,
    :via_options => @smtp_options
  )
end

case @action
when 'help', '-h', '--help', nil
  print '
Email, SMS, or arbitrary shell commands:
$ please email me "hello"
$ please email sally@example.com "Hi Sally."
$ please sms me "what is up."
$ please sms 8675309@gateway.phonecarrier.com "I CAN HAZ CONVENIENCE"
$ please exec "<arbitrary shell command, in quotes>"

Wait a certain amount of time first:
$ please sms me "`uptime`" in 5 minutes

The message being SMSed or Emailed must be all one string to the shell.
So, enclose multi-word message, or messages generated form other shell
commands or scripts, in quotes.

https://github.com/jjb/please

'
when 'email'
  if 'me' == @object
    ea = @email_address
  else
    ea = @object
  end
  email(ea, @message)
when 'sms'
  if 'me' == @object
    ea = "#{@phone_number}@#{@carrier_gateway}"
  else
    ea = @object
  end
  sms(ea, @message)
when 'exec'
  system @object
end
# future actions: beep, say something, tweet. yes, tweet.
